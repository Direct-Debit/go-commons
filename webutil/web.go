package webutil

import (
	"bytes"
	"encoding/json"
	"github.com/Direct-Debit/go-commons/errlib"
	"io"
	"io/ioutil"
	"net/http"
	"strings"
)

// Write err.Error() in a JSON object to w and return true if err != nil.
// Return from your handler function if this method returns true.
// The JSON object will be the same as one generated by ErrorResponder
func ClientError(w http.ResponseWriter, err error, code int) bool {
	if err == nil {
		return false
	}
	ErrorResponder(err.Error(), code).ServeHTTP(w, nil)
	return true
}

// Return an http.Handler that writes {"error": msg} with the given error code
func ErrorResponder(msg string, code int) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.Header().Add("Content-Type", "application/json")
		w.WriteHeader(code)
		writer := json.NewEncoder(w)
		errlib.PanicError(writer.Encode(struct {
			Error string `json:"error"`
		}{Error: msg}), "Couldn't encode JSON error")
	})
}

func RequestBody(r *http.Request, consume bool) string {
	buff := new(bytes.Buffer)
	_, err := io.Copy(buff, r.Body)
	errlib.PanicError(err, "Couldn't copy request body")
	if !consume {
		r.Body = ioutil.NopCloser(buff)
	}
	return buff.String()
}

func ParseBodyJSON(r *http.Request, target interface{}) error {
	return json.NewDecoder(r.Body).Decode(target)
}

func WriteJSON(w http.ResponseWriter, v interface{}) error {
	w.Header().Set("Content-Type", "application/json")
	return json.NewEncoder(w).Encode(v)
}

// Get the Content-Type from the header.
// Return "" if there is no Content-Type header.
func GetContentType(h http.Header) string {
	// Based on https://github.com/gorilla/handlers/blob/v1.5.1/handlers.go#L85
	ct := h.Get("Content-Type")
	if i := strings.IndexRune(ct, ';'); i != -1 {
		return ct[0:i]
	}
	return ct
}
